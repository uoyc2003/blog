{"meta":{"title":"天使24","subtitle":"The Sky Blue Archive","description":"与你的日常，就是奇迹","author":"Cyou","url":"https://blog.zeng.cyou","root":"/"},"pages":[{"title":"404 Not Found","date":"2024-09-01T08:44:44.401Z","updated":"2024-09-01T08:44:44.401Z","comments":false,"path":"404.html","permalink":"https://blog.zeng.cyou/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2024-09-01T09:44:51.690Z","updated":"2024-09-01T09:44:51.690Z","comments":true,"path":"categories/index.html","permalink":"https://blog.zeng.cyou/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2024-09-01T07:08:49.045Z","updated":"2024-09-01T06:43:41.166Z","comments":false,"path":"about/index.html","permalink":"https://blog.zeng.cyou/about/index.html","excerpt":"","text":"2024毕业于湖南网络工程职业学院（苦逼袋装）在校期间无任何成就，纯纯傻卵二刺螈 技术栈： 前端：HTML&#x2F;CSS&#x2F;Java(Type)Script Vue 后端：Java Spring&#x2F;SpringBoot&#x2F;SpringCloud 数据库：MySQL&#x2F;Redis 服务器：Nginx 其他：Git&#x2F;Linux&#x2F;Docker"},{"title":"所有标签","date":"2024-09-01T07:08:49.045Z","updated":"2024-09-01T06:43:57.102Z","comments":true,"path":"tags/index.html","permalink":"https://blog.zeng.cyou/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Docker快速入门","slug":"Docker快速入门","date":"2024-09-01T10:29:11.000Z","updated":"2024-09-01T15:10:25.464Z","comments":true,"path":"posts/2763.html","permalink":"https://blog.zeng.cyou/posts/2763.html","excerpt":"","text":"Docker是一个开源平台，用于将应用程序及其依赖打包成轻量级的容器，这些容器可以在任何支持Docker的环境中一致运行。它简化了应用程序的开发、部署和运维过程。 环境搭建DockerCentOSUbuntu 卸载旧版本 12345678sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine yum安装gcc相关 123sudo yum -y install gccsudo yum -y install gcc-c++ 安装需要的软件包 123sudo yum install -y yum-utilssudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新yum软件包索引 1sudo yum makecache fast 安装docker engine 1sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 卸载旧版本 1for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置docker的apt存储库 12345678910111213# Add Docker&#x27;s official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curlsudo install -m 0755 -d /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.ascsudo chmod a+r /etc/apt/keyrings/docker.asc# Add the repository to Apt sources:echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 如果您使用Ubuntu衍生发行版，例如Linux Mint，则可能需要使用UBUNTU_CODENAME而不是VERSION_CODENAME 安装docker engine 1sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Docker-Compose运行以下命令可以安装Docker Compose的当前稳定版本： 1sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 要安装其他版本的Compose，请替换2.21.0为要使用的Compose版本 将可执行权限应用于二进制文件： 1sudo chmod +x /usr/local/bin/docker-compose 如果安装后命令失败可以创建指向&#x2F;usr&#x2F;bin或路径中任何其他目录的符号链接 1sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试安装： 1docker-compose --version Registry 访问页面：http://ip:5000/v2/_catalog 12345678910docker run -d --name registry \\ -p 5000:5000 \\ -v /data/registry:/usr/local/registry \\ --restart=always \\ registryvim /etc/docker/daemon.jsonsystemctl daemon-reloadsystemctl restart docker 配置文件： 123&quot;insecure-registries&quot;:[&quot;registry.access.redhat.com&quot;,&quot;quay.io&quot;,&quot;ip:5000&quot;],&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;],&quot;live-restore&quot;:true 命令指南基础命令启动docker1systemctl start docker 关闭docker1systemctl stop docker 重启docker1systemctl restart docker 自启docker1systemctl enable docker 镜像命令在仓库搜索镜像1docker search [OPTIONS] &lt;search_term&gt; -f：根据指定的过滤条件进行搜索 --format：指定输出的格式 --limit：限制搜索结果的数量 --no-trunc：显示完整的镜像描述 --stars：根据指定的星级评分筛选搜索结果 下载指定的镜像1docker pull [OPTIONS] &lt;image_name&gt; -a：拉取指定镜像名称的所有标签 -q：只显示拉取的镜像ID --disable-content-trust：禁用内容信任验证 将本地的镜像推送到镜像仓库1docker push [OPTIONS] &lt;repository_address&gt;/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt; -q：只显示推送的镜像ID --tls：与仓库建立TLS连接 --all-tags：同时推送镜像的所有标签 --disable-content-trust：禁用内容信任验证 列出本地上的所有镜像1docker images [OPTIONS] [REPOSITORY[:TAG]] -a：显示所有镜像，包括中间层镜像 -q：只显示镜像的ID --no-trunc：显示完整的镜像ID --digests：显示镜像的摘要信息 --filter：根据指定的条件过滤镜像 --format：指定输出的格式 REPOSITORY：指定仓库名称 TAG：指定镜像的标签 删除指定的本地镜像1docker rmi [OPTIONS] &lt;image_name&gt; -f：强制删除镜像 -q：只显示被删除的镜像ID --no-prune：不自动删除与镜像关联的未被使用的中间层镜像 构建一个新的镜像1docker build [OPTIONS] &lt;path_to_dockerfile&gt; -t：为镜像指定标签 -f：指定要使用的Dockerfile路径 -q：只显示构建过程中生成的镜像ID --build-arg &lt;variable=value&gt;：为构建过程中的ARG指令传递变量和值 为现有的本地镜像添加一个新的标签1docker tag &lt;image_name&gt; &lt;new_image_name&gt; 显示指定镜像的历史记录1docker history [OPTIONS] &lt;image_name&gt; --format：指定输出的格式 --human：以人类可读的格式显示文件大小 --no-trunc：显示完整的命令和结果 将指定的镜像保存到一个tar文件中1docker save &lt;image_name&gt; -o &lt;output_file.tar&gt; 从一个tar文件中加载一个镜像1docker load -i &lt;input_file.tar&gt; 容器命令创建并运行一个新容器1docker run [OPTIONS] IMAGE [COMMAND] [ARG...] -d：在后台以守护进程方式运行容器 -p：将容器的端口映射到主机的端口 -v：挂载主机目录或数据卷到容器 -e：设置环境变量 -it：以交互模式运行容器，并分配一个伪终端 --rm：当容器退出时自动删除容器 --name：为容器指定一个名称 --network：指定容器连接的网络模式 启动一个已创建的容器1docker start [OPTIONS] &lt;container_id&gt; -a：将标准输入（STDIN）、标准输出（STDOUT）和标准错误输出（STDERR）与容器进行关联 -it：以交互模式运行容器，并分配一个伪终端 停止一个正在运行的容器1docker stop [OPTIONS] &lt;container_id&gt; -t：指定停止容器前等待的时间（默认 10s） 重启一个容器1docker restart [OPTIONS] &lt;container_id&gt; -t：指定停止容器前等待的时间（默认 10s） -s：指定用于关闭容器的信号 --time-format=&quot;&lt;time_format&gt;&quot;：指定等待时间的格式 删除一个停止的容器1docker rm [OPTIONS] &lt;container_id&gt; -f：强制删除运行中的容器 -v：删除关联的卷 -l：删除容器与其他容器的链接 列出正在运行的容器1docker ps [OPTIONS] -a：显示所有容器，包括已停止的容器 -q：只显示容器的ID 查看容器的日志1docker logs [OPTIONS] &lt;container_id&gt; -f：实时跟踪容器日志的输出 -t：在日志中显示时间戳 --tail：仅显示最后几行的日志 --details：显示更详细的日志输出 在正在运行的容器中执行命令1docker exec [OPTIONS] &lt;container_id&gt; &lt;command&gt; -i：以交互模式运行容器，并分配一个伪终端 -t：分配一个伪终端 检查容器的详细信息1docker inspect [OPTIONS] &lt;container_id&gt; -f：指定输出的格式 --type：指定要检查的对象类型 --size：显示相关对象的大小信息 数据卷命令创建一个数据卷1docker volume create &lt;volume_name&gt; 列出所有数据卷1docker volume ls 查看特定数据卷的详细信息1docker volume inspect &lt;volume_name&gt; 删除一个数据卷1docker volume rm &lt;volume_name&gt; 删除未使用的数据卷1docker volume prune 将数据卷绑定到容器的指定路径1docker run -v &lt;volume_name&gt;:&lt;container_path&gt; 将本地路径挂载为数据卷1docker run -v &lt;host_path&gt;:&lt;container_path&gt; 将数据卷复制到本地路径1docker run -v &lt;volume_name&gt;:/&lt;container_path&gt; -v &lt;host_path&gt;:&lt;container_path&gt;","categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.zeng.cyou/tags/Docker/"},{"name":"快速入门","slug":"快速入门","permalink":"https://blog.zeng.cyou/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"}]}],"categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.zeng.cyou/tags/Docker/"},{"name":"快速入门","slug":"快速入门","permalink":"https://blog.zeng.cyou/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"}]}