{"meta":{"title":"天使24","subtitle":"The Sky Blue Archive","description":"与你的日常，就是奇迹","author":"Cyou","url":"https://blog.zeng.cyou","root":"/"},"pages":[{"title":"关于","date":"2024-09-01T07:08:49.045Z","updated":"2024-09-01T06:43:41.166Z","comments":false,"path":"about/index.html","permalink":"https://blog.zeng.cyou/about/index.html","excerpt":"","text":"2024毕业于湖南网络工程职业学院（苦逼袋装）在校期间无任何成就，纯纯傻卵二刺螈 技术栈： 前端：HTML&#x2F;CSS&#x2F;Java(Type)Script Vue 后端：Java Spring&#x2F;SpringBoot&#x2F;SpringCloud 数据库：MySQL&#x2F;Redis 服务器：Nginx 其他：Git&#x2F;Linux&#x2F;Docker"},{"title":"404 Not Found","date":"2024-09-01T08:44:44.401Z","updated":"2024-09-01T08:44:44.401Z","comments":false,"path":"404.html","permalink":"https://blog.zeng.cyou/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2024-09-01T09:44:51.690Z","updated":"2024-09-01T09:44:51.690Z","comments":true,"path":"categories/index.html","permalink":"https://blog.zeng.cyou/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2024-09-01T07:08:49.045Z","updated":"2024-09-01T06:43:57.102Z","comments":true,"path":"tags/index.html","permalink":"https://blog.zeng.cyou/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Git命令指南","slug":"Git命令指南","date":"2024-09-08T03:08:31.000Z","updated":"2024-09-08T03:10:44.427Z","comments":true,"path":"posts/25456/","permalink":"https://blog.zeng.cyou/posts/25456/","excerpt":"","text":"常用操作 命令 描述 git init 在当前目录下初始化一个新的Git仓库 git clone &lt;远程仓库&gt; 从远程仓库克隆一个新的本地仓库 git add &lt;文件名&gt; 将工作区的修改添加到暂存区 git commit -m “&lt;提交说明&gt;” 将暂存区的内容提交到本地仓库，并附上提交说明 git status 显示工作区和暂存区的状态 git log 查看仓库的提交历史记录 git diff 显示工作区与暂存区的差异或两个提交之间的差异 git branch 列出本地分支 git branch &lt;分支名&gt; 创建一个新分支 git branch -d &lt;分支名&gt; 删除指定的本地分支（仅删除已经被合并的分支） git branch -D &lt;分支名&gt; 强制删除指定的本地分支（即使未被合并） git checkout &lt;分支名&gt; 切换到指定分支 git merge &lt;分支名&gt; 将指定分支的代码合并到当前分支 git pull 拉取远程仓库最新代码到本地分支 git push 将本地分支的代码推送到远程仓库 git push &lt;远程仓库&gt; &lt;分支&gt; 将本地分支的代码推送到远程仓库 git remote 显示远程仓库列表 git remote add &lt;名称&gt; &lt;远程仓库&gt; 添加一个远程仓库到当前仓库 git remote -v 显示所有远程仓库及其URL git remote set-url origin &lt;远程仓库&gt; 修改远程仓库的URL git remote remove &lt;仓库名称&gt; 删除指定的远程仓库 git tag 列出仓库的标签 git tag -a &lt;标签名&gt; -m “&lt;标签说明&gt;” 创建带有说明的标签 git tag -d &lt;标签名&gt; 删除指定的标签 git stash 将当前工作区的未提交修改保存到栈中，并清理工作区 git stash pop 应用最近一次stash的内容并从栈中移除 git rebase &lt;分支名&gt; 将当前分支的提交重新应用到指定分支上 git cherry-pick &lt;提交ID&gt; 将指定的提交应用到当前分支","categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.zeng.cyou/tags/Git/"},{"name":"命令指南","slug":"命令指南","permalink":"https://blog.zeng.cyou/tags/%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/"}]},{"title":"部署Hexo到云服务器","slug":"部署Hexo到云服务器","date":"2024-09-07T03:47:57.000Z","updated":"2024-09-07T12:17:17.570Z","comments":true,"path":"posts/58145/","permalink":"https://blog.zeng.cyou/posts/58145/","excerpt":"","text":"购买域名这里的推荐两个购买平台： NameSilo：国外的，界面都是英文，使用起来可能有一定的上手难度 雨云：国内的，界面简单友好，推荐新手使用 这里不会讲解购买域名的流程。 如果使用NameSilo来购买域名，推荐把域名解析到CloudFlare，然后用Cloudflare来管理域名，因为NameSilo的管理界面过于简陋了。 解析的教程这里也不会展开说明，不过可以给一个大概的流程： 注册Cloudflare账号，然后托管要绑定的域名，选择免费的计划 来到NameSilo的域名管理界面，点击进入NameServer Manager（Options栏下最右边的图标） 删除默认的两个NameServer，把Cloudflare分配的NameServer复制上去，之后点击提交按钮 购买云服务器这里以雨云平台作为使用教程： 我们注册好账号后，点击首页的云服务器，然后选择一个区域，如果不想备案的可以选择香港和美国 然后根据自己实际情况选择一个配置（注意看套餐，有两种：流量叠加型、流量不限型） 选择相应的配置后，点击购买即可 域名解析我们需要把购买的域名和服务器进行一个绑定，这样之后就可以通过域名来直接访问部署的网站。 登录Cloudflare（其它平台操作步骤同理），然后点击之前托管好的域名，找到DNS，添加两条记录。 部署网站远程连接推荐几个SSH远程连接工具： Termius Xshell MobaXterm FinalShell 打开SSH工具后，输入服务器的IP地址和root账号密码，就可以远程连接服务器了。 环境搭建这里的所有环境都安装在Docker容器里，所以需要提前把Docker安装好： Docker官方文档 Docker快速入门 然后我们就可以安装Nginx来部署我们的网站： 创建挂载的目录 1mkdir -p /data/nginx/&#123;conf,html,logs&#125; 先启动一次容器 1docker run -d --name nginx nginx 把容器里面的内容复制出来 123docker cp nginx:/etc/nginx/nginx.conf /data/nginx/conf/nginx.confdocker cp nginx:/etc/nginx/conf.d /data/nginx/conf/conf.ddocker cp nginx:/usr/share/nginx/html /data/nginx 删除容器 1docker rm -f nginx 创建docker-compose.yml 1vim /data/nginx/docker-compose.yml 123456789101112131415services: nginx: image: nginx restart: unless-stopped volumes: - /data/nginx/html:/usr/share/nginx/html - /data/nginx/logs:/var/log/nginx - /data/nginx/conf/cert:/etc/nginx/cert - /data/nginx/conf/conf.d:/etc/nginx/conf.d - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf ports: - 80:80 - 443:443 hostname: nginx container_name: nginx 如果你需要开启HTTPS就映射443端口，不开启HTTPS就不用映射443端口 启动容器 1docker-compose up -d Nginx如果要开启HTTPS，雨云提供了免费的SSL证书，可以直接去申请（不展开说明，自己研究…傲娇.ing）。 把申请到的SSL证书放到/data/nginx/conf/cert这个目录下面。 再去把服务器的80和443端口打开。 开启后，我们就可以去编写nginx.conf文件： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374user nginx;worker_processes auto;error_log /var/log/nginx/error.log notice;pid /var/run/nginx.pid;events &#123; worker_connections 2048;&#125;http &#123; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27; &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27; &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; keepalive_timeout 65; gzip on; include /etc/nginx/conf.d/*.conf; server &#123; listen 443 ssl; ##定义404页面路径 error_page 404 /404.html; #填写证书绑定的域名 server_name zeng.cyou; #填写证书文件名称 ssl_certificate cert/blog/full_chain.pem; #填写证书私钥文件名称 ssl_certificate_key cert/blog/private.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; #默认加密套件 ssl_ciphers HIGH:!aNULL:!MD5; #表示优先使用服务端加密套件,默认开启 ssl_prefer_server_ciphers on; location / &#123; try_files $uri $uri/ =404; root /usr/share/nginx/html/blog/; index index.html index.htm; &#125; location = /404.html &#123; root /usr/share/nginx/html/blog/; internal; &#125; &#125; server &#123; listen 80; #填写证书绑定的域名 server_name zeng.cyou; #将所有HTTP请求通过rewrite指令重定向到HTTPS rewrite ^(.*)$ https://$host$1; &#125;&#125; 这里你可以通过Git的方式去管理，把Hexo生成的静态文件托管到Github，然后在通过git pull的方式把文件拉取到服务器 把上面的域名进行修改，然后注意存放证书的路径不要错，然后把Hexo生成的静态文件丢到/data/nginx/html这个路径下面，最后重启Nginx容器。 1docker restart nginx","categories":[{"name":"网站搭建","slug":"网站搭建","permalink":"https://blog.zeng.cyou/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://blog.zeng.cyou/tags/Hexo/"},{"name":"云服务器","slug":"云服务器","permalink":"https://blog.zeng.cyou/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"}]},{"title":"Docker快速搭建开发环境","slug":"Docker快速搭建开发环境","date":"2024-09-02T14:11:39.000Z","updated":"2024-09-07T06:58:55.819Z","comments":true,"path":"posts/28831/","permalink":"https://blog.zeng.cyou/posts/28831/","excerpt":"","text":"MySQL创建挂载的目录1mkdir -p /data/mysql/&#123;data,logs,conf&#125; 创建挂载的配置文件1vim /data/mysql/conf/my.cnf 1234567891011121314151617181920212223242526272829303132333435[mysqld]user=mysqlport=3306bind-address=0.0.0.0#日志设置log-error=/var/log/mysql/error.loglog_timestamps=SYSTEM#慢查询日志设置slow_query_log=1slow_query_log_file=/var/log/mysql/slow.loglong_query_time=2#存储引擎设置default-storage-engine=InnoDB#InnoDB设置innodb_buffer_pool_size=1Ginnodb_log_file_size=256Minnodb_flush_log_at_trx_commit=1innodb_flush_method=O_DIRECT#字符集和排序规则character-set-server=utf8mb4collation-server=utf8mb4_unicode_ci#严格模式和SQL模式设置sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[mysql]default-character-set=utf8mb4[client]default-character-set=utf8mb4 创建docker-compose.yml1vim /data/mysql/docker-compose.yml 1234567891011121314services: mysql: image: mysql:8.0.34 restart: unless-stopped environment: - MYSQL_ROOT_PASSWORD=root volumes: - /data/mysql/conf:/etc/mysql/conf.d - /data/mysql/logs:/var/log/mysql - /data/mysql/data:/var/lib/mysql ports: - 3306:3306 hostname: mysql container_name: mysql 启动容器1docker-compose up -d Redis创建挂载的目录1mkdir -p /data/redis/&#123;data,conf&#125; 创建挂载的配置文件1vim /data/redis/conf/redis.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#设置Redis运行的模式(非保护模式)protected-mode no#监听的端口号port 6379#TCP连接队列的最大长度tcp-backlog 511#设置连接密码requirepass root#客户端空闲多长时间后关闭连接timeout 0#TCP连接的保活时间tcp-keepalive 300#是否在后台运行(不建议在生产环境使用)daemonize no#监督模式(不启用)supervised no#存放进程ID的文件路径pidfile /var/run/redis_6379.pid#日志级别loglevel notice#日志文件路径(为空表示不写日志文件)logfile &quot;&quot;#数据库数量databases 30#是否总是显示Redis的Logoalways-show-logo yes#持久化配置#在指定时间内,如果指定数量的键被修改,执行一次保存操作save 900 1save 300 10save 60 10000#如果在执行Bgsave(后台保存)时出错,停止写入操作stop-writes-on-bgsave-error yes#是否启用RDB压缩rdbcompression yes#是否在RDB文件中添加校验和rdbchecksum yes#RDB文件的名称dbfilename dump.rdb#RDB文件的存储目录dir ./#从节点是否提供过期的键replica-serve-stale-data yes#从节点是否只读replica-read-only yes#是否启用无盘同步repl-diskless-sync no#是否禁用TCP_NODELAY选项repl-disable-tcp-nodelay no#从节点优先级replica-priority 100#是否启用惰性删除lazyfree-lazy-eviction nolazyfree-lazy-expire nolazyfree-lazy-server-del noreplica-lazy-flush no#是否开启AOF持久化appendonly yes#AOF文件的名称appendfilename &quot;appendonly.aof&quot;#在AOF重写时是否禁用文件系统同步no-appendfsync-on-rewrite no#当AOF文件大小达到总数据大小的百分之多少时,执行AOF重写auto-aof-rewrite-percentage 100#当AOF文件大小达到多少时,执行AOF重写auto-aof-rewrite-min-size 64mb#是否在截断的AOF文件上加载数据aof-load-truncated yes#是否使用RDB文件的文件头aof-use-rdb-preamble yes#执行Lua脚本的时间限制lua-time-limit 5000#慢查询日志的最大长度slowlog-max-len 128#订阅通知的事件类型notify-keyspace-events &quot;&quot;#Hash类型数据结构的最大ziplist条目数和值大小hash-max-ziplist-entries 512hash-max-ziplist-value 64#List类型数据结构的最大ziplist大小和压缩深度list-max-ziplist-size -2list-compress-depth 0#Set类型数据结构的最大intset条目数set-max-intset-entries 512#Zset类型数据结构的最大ziplist条目数和值大小zset-max-ziplist-entries 128zset-max-ziplist-value 64#HyperLogLog数据结构的最大稀疏字节数hll-sparse-max-bytes 3000#Stream数据结构的最大节点字节数和最大节点数量stream-node-max-bytes 4096stream-node-max-entries 100#是否启用主动rehash操作activerehashing yes#Redis的执行频率(单位:赫兹)hz 10#动态调整Redis的执行频率dynamic-hz yes#是否在AOF重写时增量地执行文件同步aof-rewrite-incremental-fsync yes#是否在RDB保存时增量地执行文件同步rdb-save-incremental-fsync yes 创建docker-compose.yml1vim /data/redis/docker-compose.yml 12345678910111213141516services: redis: image: redis:6.0 restart: unless-stopped command: &#x27;redis-server /etc/redis/redis.conf&#x27; logging: options: max-file: 2 max-size: 100m volumes: - /data/redis/conf/redis.conf:/etc/redis/redis.conf - /data/redis/data:/data ports: - 6379:6379 hostname: redis container_name: redis 启动容器1docker-compose up -d Nginx 访问页面：http://ip:80 创建挂载的目录1mkdir -p /data/nginx/&#123;conf,html,logs&#125; 先启动一次容器1docker run -d --name nginx nginx 把容器里面的内容复制出来123docker cp nginx:/etc/nginx/nginx.conf /data/nginx/conf/nginx.confdocker cp nginx:/etc/nginx/conf.d /data/nginx/conf/conf.ddocker cp nginx:/usr/share/nginx/html /data/nginx 删除容器1docker rm -f nginx 创建docker-compose.yml1vim /data/nginx/docker-compose.yml 12345678910111213services: nginx: image: nginx restart: unless-stopped volumes: - /data/nginx/html:/usr/share/nginx/html - /data/nginx/logs:/var/log/nginx - /data/nginx/conf/conf.d:/etc/nginx/conf.d - /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf ports: - 80:80 hostname: nginx container_name: nginx 启动容器1docker-compose up -d Nacos 访问页面：http://ip:8848/nacos/index.html 创建挂载的目录1mkdir -p /data/nacos 先启动一次容器1docker run -d --name nacos nacos/nacos-server 把容器里面的内容复制出来12docker cp nacos:/home/nacos/logs /data/nacosdocker cp nacos:/home/nacos/conf /data/nacos 删除容器1docker rm -f nacos 创建挂载的配置文件1vim /data/nacos/conf/application.properties 记得修改mysql的连接地址。 12345spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://mysql:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=30000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user=rootdb.password=root 运行sql文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202/******************************************//* 数据库全名 = nacos_config *//* 表名称 = config_info *//******************************************/CREATE TABLE `config_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;, `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;, `group_id` varchar(128) DEFAULT NULL, `content` longtext NOT NULL COMMENT &#x27;content&#x27;, `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;, `src_user` text COMMENT &#x27;source user&#x27;, `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;, `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;, `c_desc` varchar(256) DEFAULT NULL, `c_use` varchar(64) DEFAULT NULL, `effect` varchar(64) DEFAULT NULL, `type` varchar(64) DEFAULT NULL, `c_schema` text, `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = config_info_aggr *//******************************************/CREATE TABLE `config_info_aggr` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;, `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;, `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;, `datum_id` varchar(255) NOT NULL COMMENT &#x27;datum_id&#x27;, `content` longtext NOT NULL COMMENT &#x27;内容&#x27;, `gmt_modified` datetime NOT NULL COMMENT &#x27;修改时间&#x27;, `app_name` varchar(128) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;增加租户字段&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = config_info_beta *//******************************************/CREATE TABLE `config_info_beta` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;, `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;, `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;, `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;, `content` longtext NOT NULL COMMENT &#x27;content&#x27;, `beta_ips` varchar(1024) DEFAULT NULL COMMENT &#x27;betaIps&#x27;, `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;, `src_user` text COMMENT &#x27;source user&#x27;, `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;, `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_beta&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = config_info_tag *//******************************************/CREATE TABLE `config_info_tag` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;, `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;, `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;, `tag_id` varchar(128) NOT NULL COMMENT &#x27;tag_id&#x27;, `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;, `content` longtext NOT NULL COMMENT &#x27;content&#x27;, `md5` varchar(32) DEFAULT NULL COMMENT &#x27;md5&#x27;, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;, `src_user` text COMMENT &#x27;source user&#x27;, `src_ip` varchar(20) DEFAULT NULL COMMENT &#x27;source ip&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_info_tag&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = config_tags_relation *//******************************************/CREATE TABLE `config_tags_relation` ( `id` bigint(20) NOT NULL COMMENT &#x27;id&#x27;, `tag_name` varchar(128) NOT NULL COMMENT &#x27;tag_name&#x27;, `tag_type` varchar(64) DEFAULT NULL COMMENT &#x27;tag_type&#x27;, `data_id` varchar(255) NOT NULL COMMENT &#x27;data_id&#x27;, `group_id` varchar(128) NOT NULL COMMENT &#x27;group_id&#x27;, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;, `nid` bigint(20) NOT NULL AUTO_INCREMENT, PRIMARY KEY (`nid`), UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`), KEY `idx_tenant_id` (`tenant_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;config_tag_relation&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = group_capacity *//******************************************/CREATE TABLE `group_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;, `group_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Group ID,空字符表示整个集群&#x27;, `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额,0表示使用默认值&#x27;, `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;, `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限,单位为字节,0表示使用默认值&#x27;, `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数,,0表示使用默认值&#x27;, `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限,单位为字节,0表示使用默认值&#x27;, `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_group_id` (`group_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;集群、各Group容量信息表&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = his_config_info *//******************************************/CREATE TABLE `his_config_info` ( `id` bigint(64) unsigned NOT NULL, `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT, `data_id` varchar(255) NOT NULL, `group_id` varchar(128) NOT NULL, `app_name` varchar(128) DEFAULT NULL COMMENT &#x27;app_name&#x27;, `content` longtext NOT NULL, `md5` varchar(32) DEFAULT NULL, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27;, `src_user` text, `src_ip` varchar(20) DEFAULT NULL, `op_type` char(10) DEFAULT NULL, `tenant_id` varchar(128) DEFAULT &#x27;&#x27; COMMENT &#x27;租户字段&#x27;, `encrypted_data_key` text NOT NULL COMMENT &#x27;秘钥&#x27;, PRIMARY KEY (`nid`), KEY `idx_gmt_create` (`gmt_create`), KEY `idx_gmt_modified` (`gmt_modified`), KEY `idx_did` (`data_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;多租户改造&#x27;;/******************************************//* 数据库全名 = nacos_config *//* 表名称 = tenant_capacity *//******************************************/CREATE TABLE `tenant_capacity` ( `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT &#x27;主键ID&#x27;, `tenant_id` varchar(128) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;Tenant ID&#x27;, `quota` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;配额,0表示使用默认值&#x27;, `usage` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;使用量&#x27;, `max_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个配置大小上限,单位为字节,0表示使用默认值&#x27;, `max_aggr_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;聚合子配置最大个数&#x27;, `max_aggr_size` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;单个聚合数据的子配置大小上限,单位为字节,0表示使用默认值&#x27;, `max_history_count` int(10) unsigned NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;最大变更历史数量&#x27;, `gmt_create` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;创建时间&#x27;, `gmt_modified` datetime NOT NULL DEFAULT &#x27;2010-05-05 00:00:00&#x27; COMMENT &#x27;修改时间&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_id` (`tenant_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;租户容量信息表&#x27;;CREATE TABLE `tenant_info` ( `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;id&#x27;, `kp` varchar(128) NOT NULL COMMENT &#x27;kp&#x27;, `tenant_id` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_id&#x27;, `tenant_name` varchar(128) default &#x27;&#x27; COMMENT &#x27;tenant_name&#x27;, `tenant_desc` varchar(256) DEFAULT NULL COMMENT &#x27;tenant_desc&#x27;, `create_source` varchar(32) DEFAULT NULL COMMENT &#x27;create_source&#x27;, `gmt_create` bigint(20) NOT NULL COMMENT &#x27;创建时间&#x27;, `gmt_modified` bigint(20) NOT NULL COMMENT &#x27;修改时间&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`), KEY `idx_tenant_id` (`tenant_id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT=&#x27;tenant_info&#x27;;CREATE TABLE users ( username varchar(50) NOT NULL PRIMARY KEY, password varchar(500) NOT NULL, enabled boolean NOT NULL);CREATE TABLE roles ( username varchar(50) NOT NULL, role varchar(50) NOT NULL, constraint uk_username_role UNIQUE (username,role));CREATE TABLE permissions ( role varchar(50) NOT NULL, resource varchar(512) NOT NULL, action varchar(8) NOT NULL, constraint uk_role_permission UNIQUE (role,resource,action));INSERT INTO users (username, password, enabled) VALUES (&#x27;nacos&#x27;, &#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;, TRUE);INSERT INTO roles (username, role) VALUES (&#x27;nacos&#x27;, &#x27;ROLE_ADMIN&#x27;); 创建docker-compose.yml1vim /data/nacos/docker-compose.yml 123456789101112131415161718services: nacos-server: image: nacos/nacos-server restart: unless-stopped privileged: true environment: - MODE=standalone - JVM_XMX=256m - JVM_XMS=256m volumes: - /data/nacos/conf:/data/nacos/conf - /data/nacos/logs:/data/nacos/logs ports: - 9849:9849 - 9848:9848 - 8848:8848 hostname: nacos container_name: nacos 启动容器1docker-compose up -d Minio 访问页面：http://ip:9090 创建挂载的目录1mkdir -p /data/minio/&#123;&#123;data,conf&#125;,data/data-&#123;1..4&#125;&#125; 创建挂载的配置文件1vim /data/minio/conf/config.env 123456#账号和密码(至少8位)MINIO_ROOT_USER=miniorootMINIO_ROOT_PASSWORD=minioroot#存储卷路径MINIO_VOLUMES=&quot;/data-&#123;1...4&#125;&quot; 创建docker-compose.yml1vim /data/minio/docker-compose.yml 123456789101112131415161718services: minio: image: quay.io/minio/minio restart: unless-stopped command: &#x27;server --console-address &quot;:9090&quot;&#x27; environment: - MINIO_CONFIG_ENV_FILE=/etc/config.env volumes: - /data/minio/conf/config.env:/etc/config.env - /data/minio/data/data-4:/data-4 - /data/minio/data/data-3:/data-3 - /data/minio/data/data-2:/data-2 - /data/minio/data/data-1:/data-1 ports: - 9090:9090 - 9000:9000 hostname: minio container_name: minio 启动容器1docker-compose up -d Xxl-Job 访问页面：http://ip:7397/xxl-job-admin 创建挂载的目录1mkdir -p /data/xxl-job/logs 运行sql文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117CREATE database if NOT EXISTS `xxl_job` default character set utf8mb4 collate utf8mb4_unicode_ci;use `xxl_job`;SET NAMES utf8mb4;CREATE TABLE `xxl_job_info` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT &#x27;执行器主键ID&#x27;, `job_desc` varchar(255) NOT NULL, `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, `author` varchar(64) DEFAULT NULL COMMENT &#x27;作者&#x27;, `alarm_email` varchar(255) DEFAULT NULL COMMENT &#x27;报警邮件&#x27;, `schedule_type` varchar(50) NOT NULL DEFAULT &#x27;NONE&#x27; COMMENT &#x27;调度类型&#x27;, `schedule_conf` varchar(128) DEFAULT NULL COMMENT &#x27;调度配置,值含义取决于调度类型&#x27;, `misfire_strategy` varchar(50) NOT NULL DEFAULT &#x27;DO_NOTHING&#x27; COMMENT &#x27;调度过期策略&#x27;, `executor_route_strategy` varchar(50) DEFAULT NULL COMMENT &#x27;执行器路由策略&#x27;, `executor_handler` varchar(255) DEFAULT NULL COMMENT &#x27;执行器任务handler&#x27;, `executor_param` varchar(512) DEFAULT NULL COMMENT &#x27;执行器任务参数&#x27;, `executor_block_strategy` varchar(50) DEFAULT NULL COMMENT &#x27;阻塞处理策略&#x27;, `executor_timeout` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;任务执行超时时间,单位秒&#x27;, `executor_fail_retry_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;失败重试次数&#x27;, `glue_type` varchar(50) NOT NULL COMMENT &#x27;GLUE类型&#x27;, `glue_source` mediumtext COMMENT &#x27;GLUE源代码&#x27;, `glue_remark` varchar(128) DEFAULT NULL COMMENT &#x27;GLUE备注&#x27;, `glue_updatetime` datetime DEFAULT NULL COMMENT &#x27;GLUE更新时间&#x27;, `child_jobid` varchar(255) DEFAULT NULL COMMENT &#x27;子任务ID,多个逗号分隔&#x27;, `trigger_status` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;调度状态:0-停止,1-运行&#x27;, `trigger_last_time` bigint(13) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;上次调度时间&#x27;, `trigger_next_time` bigint(13) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;下次调度时间&#x27;, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_log` ( `id` bigint(20) NOT NULL AUTO_INCREMENT, `job_group` int(11) NOT NULL COMMENT &#x27;执行器主键ID&#x27;, `job_id` int(11) NOT NULL COMMENT &#x27;任务,主键ID&#x27;, `executor_address` varchar(255) DEFAULT NULL COMMENT &#x27;执行器地址,本次执行的地址&#x27;, `executor_handler` varchar(255) DEFAULT NULL COMMENT &#x27;执行器任务handler&#x27;, `executor_param` varchar(512) DEFAULT NULL COMMENT &#x27;执行器任务参数&#x27;, `executor_sharding_param` varchar(20) DEFAULT NULL COMMENT &#x27;执行器任务分片参数,格式如 1/2&#x27;, `executor_fail_retry_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;失败重试次数&#x27;, `trigger_time` datetime DEFAULT NULL COMMENT &#x27;调度-时间&#x27;, `trigger_code` int(11) NOT NULL COMMENT &#x27;调度-结果&#x27;, `trigger_msg` text COMMENT &#x27;调度-日志&#x27;, `handle_time` datetime DEFAULT NULL COMMENT &#x27;执行-时间&#x27;, `handle_code` int(11) NOT NULL COMMENT &#x27;执行-状态&#x27;, `handle_msg` text COMMENT &#x27;执行-日志&#x27;, `alarm_status` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;告警状态:0-默认、1-无需告警、2-告警成功、3-告警失败&#x27;, PRIMARY KEY (`id`), KEY `I_trigger_time` (`trigger_time`), KEY `I_handle_code` (`handle_code`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_log_report` ( `id` int(11) NOT NULL AUTO_INCREMENT, `trigger_day` datetime DEFAULT NULL COMMENT &#x27;调度-时间&#x27;, `running_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;运行中-日志数量&#x27;, `suc_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行成功-日志数量&#x27;, `fail_count` int(11) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行失败-日志数量&#x27;, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `i_trigger_day` (`trigger_day`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_logglue` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_id` int(11) NOT NULL COMMENT &#x27;任务,主键ID&#x27;, `glue_type` varchar(50) DEFAULT NULL COMMENT &#x27;GLUE类型&#x27;, `glue_source` mediumtext COMMENT &#x27;GLUE源代码&#x27;, `glue_remark` varchar(128) NOT NULL COMMENT &#x27;GLUE备注&#x27;, `add_time` datetime DEFAULT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_registry` ( `id` int(11) NOT NULL AUTO_INCREMENT, `registry_group` varchar(50) NOT NULL, `registry_key` varchar(255) NOT NULL, `registry_value` varchar(255) NOT NULL, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`), KEY `i_g_k_v` (`registry_group`,`registry_key`,`registry_value`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_group` ( `id` int(11) NOT NULL AUTO_INCREMENT, `app_name` varchar(64) NOT NULL COMMENT &#x27;执行器AppName&#x27;, `title` varchar(12) NOT NULL COMMENT &#x27;执行器名称&#x27;, `address_type` tinyint(4) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;执行器地址类型:0=自动注册、1=手动录入&#x27;, `address_list` text COMMENT &#x27;执行器地址列表,多地址逗号分隔&#x27;, `update_time` datetime DEFAULT NULL, PRIMARY KEY (`id`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_user` ( `id` int(11) NOT NULL AUTO_INCREMENT, `username` varchar(50) NOT NULL COMMENT &#x27;账号&#x27;, `password` varchar(50) NOT NULL COMMENT &#x27;密码&#x27;, `role` tinyint(4) NOT NULL COMMENT &#x27;角色:0-普通用户、1-管理员&#x27;, `permission` varchar(255) DEFAULT NULL COMMENT &#x27;权限:执行器ID列表,多个逗号分割&#x27;, PRIMARY KEY (`id`), UNIQUE KEY `i_username` (`username`) USING BTREE) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;CREATE TABLE `xxl_job_lock` ( `lock_name` varchar(50) NOT NULL COMMENT &#x27;锁名称&#x27;, PRIMARY KEY (`lock_name`)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;INSERT INTO `xxl_job_group`(`id`, `app_name`, `title`, `address_type`, `address_list`, `update_time`) VALUES (1, &#x27;xxl-job-executor-sample&#x27;, &#x27;示例执行器&#x27;, 0, NULL, &#x27;2018-11-03 22:21:31&#x27; );INSERT INTO `xxl_job_info`(`id`, `job_group`, `job_desc`, `add_time`, `update_time`, `author`, `alarm_email`, `schedule_type`, `schedule_conf`, `misfire_strategy`, `executor_route_strategy`, `executor_handler`, `executor_param`, `executor_block_strategy`, `executor_timeout`, `executor_fail_retry_count`, `glue_type`, `glue_source`, `glue_remark`, `glue_updatetime`, `child_jobid`) VALUES (1, 1, &#x27;测试任务1&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;XXL&#x27;, &#x27;&#x27;, &#x27;CRON&#x27;, &#x27;0 0 0 * * ? *&#x27;, &#x27;DO_NOTHING&#x27;, &#x27;FIRST&#x27;, &#x27;demoJobHandler&#x27;, &#x27;&#x27;, &#x27;SERIAL_EXECUTION&#x27;, 0, 0, &#x27;BEAN&#x27;, &#x27;&#x27;, &#x27;GLUE代码初始化&#x27;, &#x27;2018-11-03 22:21:31&#x27;, &#x27;&#x27;);INSERT INTO `xxl_job_user`(`id`, `username`, `password`, `role`, `permission`) VALUES (1, &#x27;admin&#x27;, &#x27;e10adc3949ba59abbe56e057f20f883e&#x27;, 1, NULL);INSERT INTO `xxl_job_lock` ( `lock_name`) VALUES ( &#x27;schedule_lock&#x27;);commit; 创建docker-compose.yml1vim /data/xxl-job/docker-compose.yml 记得修改mysql的连接地址，accessToken的默认值就是default_token，当然也可以对其进行修改。 123456789101112services: xxl-job-admin: image: xuxueli/xxl-job-admin:2.4.0 restart: unless-stopped environment: - PARAMS=--spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver --spring.datasource.url=jdbc:mysql://ip:3306/xxl_job?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai --spring.datasource.username=root --spring.datasource.password=root --xxl.job.accessToken=default_token volumes: - /data/xxl-job/logs:/data/applogs ports: - 7397:8080 hostname: xxl-job-admin container_name: xxl-job-admin 启动容器1docker-compose up -d RabbitMQ 访问页面：http://ip:15672 创建挂载的目录1mkdir -p /data/rabbitmq/plugins 先启动一次容器1docker run -d --name rabbitmq rabbitmq:3.12.12-management 把容器里面的内容复制出来1docker cp rabbitmq:/plugins/. /data/rabbitmq/plugins/ 删除容器1docker rm -f rabbitmq 创建docker-compose.yml1vim /data/rabbitmq/docker-compose.yml 1234567891011121314151617181920services: rabbitmq: image: rabbitmq:3.12.12-management restart: unless-stopped environment: - RABBITMQ_DEFAULT_PASS=root - RABBITMQ_DEFAULT_USER=root volumes: - /data/rabbitmq/plugins:/plugins ports: - 5672:5672 - 15672:15672 networks: - rabbitmq_net hostname: rabbitmq container_name: rabbitmqnetworks: rabbitmq_net: driver: bridge 启动容器1docker-compose up -d RocketMQ 访问页面：http://ip:8180 创建挂载的目录123mkdir -p /data/rocketmq/namesrvmkdir -p /data/rocketmq/console/datamkdir -p /data/rocketmq/broker/&#123;conf,lib&#125; 创建broker配置文件1vim /data/rocketmq/broker/conf/broker.conf 记得修改brokerIP1为宿主机IP。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#所属集群名字brokerClusterName=DefaultCluster#broker名字,注意此处不同的配置文件填写的不一样,如果在broker-a.properties使用:broker-a,在broker-b.properties使用:broker-bbrokerName=broker-a#0:表示Master &gt;0:表示SlavebrokerId=0#nameServer地址,分号分割#namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876namesrvAddr=rocketmq-namesrv:9876#启动IP,如果docker报com.alibaba.rocketmq.remoting.exception.RemotingConnectException: connect to &lt;192.168.0.120:10909&gt; failed#解决方式1:加上一句producer.setVipChannelEnabled(false);#解决方式2:brokerIP1设置宿主机IP,不要使用docker内部IPbrokerIP1=ip#在发送消息时,自动创建服务器不存在的topic,默认创建的队列数defaultTopicQueueNums=4#是否允许Broker自动创建Topic,建议线下开启,线上关闭autoCreateTopicEnable=true#是否允许Broker自动创建订阅组,建议线下开启,线上关闭autoCreateSubscriptionGroup=true#Broker对外服务的监听端口listenPort=10911#此参数控制是否开启密码,不开启可设置falseaclEnable=true#删除文件时间点,默认凌晨4点deleteWhen=04#文件保留时间,默认48小时fileReservedTime=120#commitLog每个文件的大小默认1GmapedFileSizeCommitLog=1073741824#ConsumeQueue每个文件默认存30W条,根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径#storePathRootDir=/home/ztztdata/rocketmq-all-4.1.0-incubating/store#commitLog 存储路径#storePathCommitLog=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/commitlog#消费队列存储#storePathConsumeQueue=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/consumequeue#消息索引存储路径#storePathIndex=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/index#checkpoint 文件存储路径#storeCheckpoint=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/checkpoint#abort 文件存储路径#abortFile=/home/ztztdata/rocketmq-all-4.1.0-incubating/store/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker的角色#- ASYNC_MASTER 异步复制Master#- SYNC_MASTER 同步双写Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128 创建acl配置文件1vim /data/rocketmq/broker/conf/plain_acl.yml accessKey和secretKey需要大于6位。 12345678910111213141516171819202122232425#全局白名单,如果配置了则不需要走acl校验,慎重配置globalWhiteRemoteAddresses:# - 47.100.93.*# - 156.254.120.* accounts: - accessKey: rocketmquser secretKey: 12345678 whiteRemoteAddress: admin: false defaultTopicPerm: DENY defaultGroupPerm: SUB topicPerms: - topicA=DENY - topicB=PUB|SUB - topicC=SUB groupPerms: - groupA=DENY - groupB=PUB|SUB - groupC=SUB - accessKey: rocketmqadmin secretKey: 12345678 whiteRemoteAddress: admin: true 创建console配置文件1vim /data/rocketmq/console/data/users.properties 12#用户名和密码规则「用户名=密码,权限」1:管理员 0:普通用户admin=123456,1 创建docker-compose.yml1vim /data/rocketmq/docker-compose.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465services: rocketmq-namesrv: image: foxiswho/rocketmq:4.8.0 restart: unless-stopped command: [ &quot;sh&quot;, &quot;mqnamesrv&quot; ] environment: JAVA_OPT_EXT: &quot;-Duser.home=/home/rocketmq -Xms128M -Xmx128M -Xmn128m&quot; volumes: - /data/rocketmq/namesrv/logs:/home/rocketmq/logs - /data/rocketmq/namesrv/store:/home/rocketmq/store ports: - 9876:9876 networks: rocketmq_net: aliases: - rocketmq-namesrv hostname: rocketmq-namesrv container_name: rocketmq-namesrv rocketmq-broker: image: foxiswho/rocketmq:4.8.0 restart: unless-stopped command: [ &quot;sh&quot;, &quot;mqbroker&quot;, &quot;-c&quot;, &quot;/etc/rocketmq/broker.conf&quot; ] environment: JAVA_OPT_EXT: &quot;-Duser.home=/home/rocketmq -Xms128m -Xmx128m -Xmn128m&quot; volumes: - /data/rocketmq/broker/logs:/home/rocketmq/logs - /data/rocketmq/broker/store:/home/rocketmq/store - /data/rocketmq/broker/conf/plain_acl.yml:/home/rocketmq/rocketmq-4.8.0/conf/plain_acl.yml - /data/rocketmq/broker/conf/broker.conf:/etc/rocketmq/broker.conf ports: - 10909:10909 - 10911:10911 depends_on: - rocketmq-namesrv networks: rocketmq_net: aliases: - rocketmq-broker hostname: rocketmq-broker container_name: rocketmq-broker rocketmq-console: image: iamverygood/rocketmq-console:4.7.1 restart: unless-stopped environment: JAVA_OPTS: &quot;-Drocketmq.namesrv.addr=rocketmq-namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false -Drocketmq.config.loginRequired=true -Drocketmq.config.aclEnabled=true -Duser.timezone=&#x27;Asia/Shanghai&#x27; -Drocketmq.config.accessKey=rocketmqadmin -Drocketmq.config.secretKey=12345678&quot; volumes: - /data/rocketmq/console/data:/tmp/rocketmq-console/data - /etc/localtime:/etc/localtime ports: - 8180:8080 depends_on: - rocketmq-namesrv networks: rocketmq_net: aliases: - rocketmq-console hostname: rocketmq-console container_name: rocketmq-consolenetworks: rocketmq_net: name: rocketmq_net driver: bridge 如果你的acl密码改了，记得把yml里的console帐号密码也一同更改。 授予目录权限123chmod -R 777 /data/rocketmq/namesrv/chmod -R 777 /data/rocketmq/broker/chmod -R 777 /data/rocketmq/console/ 启动容器1docker-compose up -d 注意，如果第一次启动不成功，是因为broker需要创建一堆文件，没有权限，再执行一遍权限命令。 12345chmod -R 777 /data/rocketmq/namesrv/chmod -R 777 /data/rocketmq/broker/chmod -R 777 /data/rocketmq/console/docker-compose up --force-recreate -d Kafka 访问页面：http://ip:9001 创建挂载的目录12mkdir -p /data/zookeeper/&#123;data,conf,logs&#125;mkdir -p /data/kafka/kafka-map/data 创建挂载的配置文件1vim /data/zookeeper/conf/zoo.cfg 1234567891011121314151617181920212223242526272829303132#数据目录dataDir=/data#事务日志目录dataLogDir=/datalog#控制超时和计时tickTime=2000#初始化连接限制时间initLimit=5#同步限制时间syncLimit=2#自动清理快照文件的保留数量autopurge.snapRetainCount=3#自动清理快照文件的时间间隔(设置为0表示禁用自动清理)autopurge.purgeInterval=0#允许的最大客户端连接数maxClientCnxns=60#单机版模式开启standaloneEnabled=true#启用Zookeeper服务器的管理界面admin.enableServer=true#Zookeeper服务器的配置server.1=localhost:2888:3888;2181 创建docker-compose.yml1vim /data/kafka/docker-compose.yml 记得修改kafka-server为设置宿主机IP。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647services: zookeeper: image: zookeeper restart: unless-stopped volumes: - /data/zookeeper/data:/data - /data/zookeeper/conf:/conf - /data/zookeeper/logs:/datalog ports: - 2181:2181 networks: - kafka_net hostname: zookeeper container_name: zookeeper kafka-server: image: bitnami/kafka restart: unless-stopped environment: - ALLOW_PLAINTEXT_LISTENER=yes - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181 - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://ip:9092 ports: - 9092:9092 networks: - kafka_net hostname: kafka-server container_name: kafka-server kafka-map: image: dushixiang/kafka-map restart: unless-stopped environment: - DEFAULT_USERNAME=root - DEFAULT_PASSWORD=root volumes: - /data/kafka/kafka-map/data:/usr/local/kafka-map/data ports: - 9001:8080 networks: - kafka_net hostname: kafka-map container_name: kafka-mapnetworks: kafka_net: driver: bridge 启动容器1docker-compose up -d","categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.zeng.cyou/tags/Docker/"},{"name":"开发环境","slug":"开发环境","permalink":"https://blog.zeng.cyou/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"}]},{"title":"Docker快速入门","slug":"Docker快速入门","date":"2024-09-01T10:29:11.000Z","updated":"2024-09-05T12:13:33.830Z","comments":true,"path":"posts/2763/","permalink":"https://blog.zeng.cyou/posts/2763/","excerpt":"","text":"环境搭建DockerCentOSUbuntu 卸载旧版本 12345678sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine yum安装gcc相关 123sudo yum -y install gccsudo yum -y install gcc-c++ 安装需要的软件包 123sudo yum install -y yum-utilssudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新yum软件包索引 1sudo yum makecache fast 安装docker engine 1sudo yum -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin 卸载旧版本 1for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done 设置docker的apt存储库 12345678910111213# Add Docker&#x27;s official GPG key:sudo apt-get updatesudo apt-get install ca-certificates curlsudo install -m 0755 -d /etc/apt/keyringssudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.ascsudo chmod a+r /etc/apt/keyrings/docker.asc# Add the repository to Apt sources:echo \\ &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;) stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update 如果您使用Ubuntu衍生发行版，例如Linux Mint，则可能需要使用UBUNTU_CODENAME而不是VERSION_CODENAME 安装docker engine 1sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Docker-Compose运行以下命令可以安装Docker Compose的当前稳定版本： 1sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose 要安装其他版本的Compose，请替换2.21.0为要使用的Compose版本 将可执行权限应用于二进制文件： 1sudo chmod +x /usr/local/bin/docker-compose 如果安装后命令失败可以创建指向&#x2F;usr&#x2F;bin或路径中任何其他目录的符号链接 1sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose 测试安装： 1docker-compose --version Registry 访问页面：http://ip:5000/v2/_catalog 12345678910docker run -d --name registry \\ -p 5000:5000 \\ -v /data/registry:/usr/local/registry \\ --restart=always \\ registryvim /etc/docker/daemon.jsonsystemctl daemon-reloadsystemctl restart docker 配置文件： 123&quot;insecure-registries&quot;:[&quot;registry.access.redhat.com&quot;,&quot;quay.io&quot;,&quot;ip:5000&quot;],&quot;exec-opts&quot;:[&quot;native.cgroupdriver=systemd&quot;],&quot;live-restore&quot;:true 命令指南基础命令启动docker1systemctl start docker 关闭docker1systemctl stop docker 重启docker1systemctl restart docker 自启docker1systemctl enable docker 镜像命令在仓库搜索镜像1docker search [OPTIONS] &lt;search_term&gt; -f：根据指定的过滤条件进行搜索 --format：指定输出的格式 --limit：限制搜索结果的数量 --no-trunc：显示完整的镜像描述 --stars：根据指定的星级评分筛选搜索结果 下载指定的镜像1docker pull [OPTIONS] &lt;image_name&gt; -a：拉取指定镜像名称的所有标签 -q：只显示拉取的镜像ID --disable-content-trust：禁用内容信任验证 将本地的镜像推送到镜像仓库1docker push [OPTIONS] &lt;repository_address&gt;/&lt;namespace&gt;/&lt;image_name&gt;:&lt;tag&gt; -q：只显示推送的镜像ID --tls：与仓库建立TLS连接 --all-tags：同时推送镜像的所有标签 --disable-content-trust：禁用内容信任验证 列出本地上的所有镜像1docker images [OPTIONS] [REPOSITORY[:TAG]] -a：显示所有镜像，包括中间层镜像 -q：只显示镜像的ID --no-trunc：显示完整的镜像ID --digests：显示镜像的摘要信息 --filter：根据指定的条件过滤镜像 --format：指定输出的格式 REPOSITORY：指定仓库名称 TAG：指定镜像的标签 删除指定的本地镜像1docker rmi [OPTIONS] &lt;image_name&gt; -f：强制删除镜像 -q：只显示被删除的镜像ID --no-prune：不自动删除与镜像关联的未被使用的中间层镜像 构建一个新的镜像1docker build [OPTIONS] &lt;path_to_dockerfile&gt; -t：为镜像指定标签 -f：指定要使用的Dockerfile路径 -q：只显示构建过程中生成的镜像ID --build-arg &lt;variable=value&gt;：为构建过程中的ARG指令传递变量和值 为现有的本地镜像添加一个新的标签1docker tag &lt;image_name&gt; &lt;new_image_name&gt; 显示指定镜像的历史记录1docker history [OPTIONS] &lt;image_name&gt; --format：指定输出的格式 --human：以人类可读的格式显示文件大小 --no-trunc：显示完整的命令和结果 将指定的镜像保存到一个tar文件中1docker save &lt;image_name&gt; -o &lt;output_file.tar&gt; 从一个tar文件中加载一个镜像1docker load -i &lt;input_file.tar&gt; 容器命令创建并运行一个新容器1docker run [OPTIONS] IMAGE [COMMAND] [ARG...] -d：在后台以守护进程方式运行容器 -p：将容器的端口映射到主机的端口 -v：挂载主机目录或数据卷到容器 -e：设置环境变量 -it：以交互模式运行容器，并分配一个伪终端 --rm：当容器退出时自动删除容器 --name：为容器指定一个名称 --network：指定容器连接的网络模式 启动一个已创建的容器1docker start [OPTIONS] &lt;container_id&gt; -a：将标准输入（STDIN）、标准输出（STDOUT）和标准错误输出（STDERR）与容器进行关联 -it：以交互模式运行容器，并分配一个伪终端 停止一个正在运行的容器1docker stop [OPTIONS] &lt;container_id&gt; -t：指定停止容器前等待的时间（默认 10s） 重启一个容器1docker restart [OPTIONS] &lt;container_id&gt; -t：指定停止容器前等待的时间（默认 10s） -s：指定用于关闭容器的信号 --time-format=&quot;&lt;time_format&gt;&quot;：指定等待时间的格式 删除一个停止的容器1docker rm [OPTIONS] &lt;container_id&gt; -f：强制删除运行中的容器 -v：删除关联的卷 -l：删除容器与其他容器的链接 列出正在运行的容器1docker ps [OPTIONS] -a：显示所有容器，包括已停止的容器 -q：只显示容器的ID 查看容器的日志1docker logs [OPTIONS] &lt;container_id&gt; -f：实时跟踪容器日志的输出 -t：在日志中显示时间戳 --tail：仅显示最后几行的日志 --details：显示更详细的日志输出 在正在运行的容器中执行命令1docker exec [OPTIONS] &lt;container_id&gt; &lt;command&gt; -i：以交互模式运行容器，并分配一个伪终端 -t：分配一个伪终端 检查容器的详细信息1docker inspect [OPTIONS] &lt;container_id&gt; -f：指定输出的格式 --type：指定要检查的对象类型 --size：显示相关对象的大小信息 数据卷命令创建一个数据卷1docker volume create &lt;volume_name&gt; 列出所有数据卷1docker volume ls 查看特定数据卷的详细信息1docker volume inspect &lt;volume_name&gt; 删除一个数据卷1docker volume rm &lt;volume_name&gt; 删除未使用的数据卷1docker volume prune 将数据卷绑定到容器的指定路径1docker run -v &lt;volume_name&gt;:&lt;container_path&gt; 将本地路径挂载为数据卷1docker run -v &lt;host_path&gt;:&lt;container_path&gt; 将数据卷复制到本地路径1docker run -v &lt;volume_name&gt;:/&lt;container_path&gt; -v &lt;host_path&gt;:&lt;container_path&gt;","categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://blog.zeng.cyou/tags/Docker/"},{"name":"快速入门","slug":"快速入门","permalink":"https://blog.zeng.cyou/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"}]}],"categories":[{"name":"编程笔记","slug":"编程笔记","permalink":"https://blog.zeng.cyou/categories/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/"},{"name":"网站搭建","slug":"网站搭建","permalink":"https://blog.zeng.cyou/categories/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"Git","slug":"Git","permalink":"https://blog.zeng.cyou/tags/Git/"},{"name":"命令指南","slug":"命令指南","permalink":"https://blog.zeng.cyou/tags/%E5%91%BD%E4%BB%A4%E6%8C%87%E5%8D%97/"},{"name":"Hexo","slug":"Hexo","permalink":"https://blog.zeng.cyou/tags/Hexo/"},{"name":"云服务器","slug":"云服务器","permalink":"https://blog.zeng.cyou/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"Docker","slug":"Docker","permalink":"https://blog.zeng.cyou/tags/Docker/"},{"name":"开发环境","slug":"开发环境","permalink":"https://blog.zeng.cyou/tags/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"name":"快速入门","slug":"快速入门","permalink":"https://blog.zeng.cyou/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"}]}